set nocompatible                " be iMproved
"filetype off                    " required!
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()

Bundle 'gmarik/vundle'

Bundle 'kien/ctrlp.vim'
Bundle 'powerline/fonts'
Bundle 'altercation/vim-colors-solarized'
Bundle 'scrooloose/nerdtree'
Bundle 'mbbill/undotree'
Bundle 'jiangmiao/auto-pairs'
Bundle 'majutsushi/tagbar'
Bundle 'jlanzarotta/bufexplorer'
Bundle 'vim-scripts/winmanager'
Bundle 'tacahiroy/ctrlp-funky'
Bundle 'mrtazz/DoxygenToolkit.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'tpope/vim-fugitive'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-surround'
Bundle 'Valloric/YouCompleteMe'

"NERDTree{
"        autocmd vimenter * NERDTree
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"}

"TagBar{
    nmap <Leader>tt :TagbarToggle<CR>
"}
"

" Winmanager {

let g:NERDTree_title="[NERDTree]"
let g:BufExploer_title="[BufExplorer]"
let g:winManagerWindowLayout="NERDTree|BufExplorer"
"let g:persistentBehaviour=0
let g:winManagerWidth=30
let g:defaultExplorer=0

nmap <C-w><C-f> :FirstExplorerWindow<CR>
nmap <C-w><C-b> :BottomExplorerWindow<CR>

function! NERDTree_Start()  
        exec 'NERDTree'  
endfunction

function! NERDTree_IsValid()  
         return 1  
endfunction

function! BufExplorer_Start()  
        exec 'BufExplorer'  
endfunction

function! BufExploer_IsValid()  
         return 1  
endfunction

nmap <C-m> :if IsWinManagerVisible() <BAR> WMToggle <CR> <BAR> else <BAR> WMToggle<CR>:q<CR> endif <CR><CR>

"}
"
" BufExplorer {
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
autocmd BufWinEnter \[Buf\ List\] setl nonumber 

" }

" Ctrlp-funky {
    nnoremap <Leader>fu :CtrlPFunky<CR>
    " narrow the list down with a word under cursor
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_matchtype = 'path'
" }

" Powerline {
set laststatus=2
let g:Powerline_symbols='unicode'
" }
"
" syntastic {
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes'] 
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
nnoremap <Leader>sn :lnext<cr>
nnoremap <Leader>sp :lprevious<cr>
" }

" Youcompleteme {
nmap <leader>gd :YcmDiags<CR>
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>           " 跳转到申明处
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>            " 跳转到定义处
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_error_symbol = '>>'                                   " 编译错误标识符
let g:ycm_warning_symbol = '>*'                                 " 编译警告标识符
let g:ycm_confirm_extra_conf=0                                  " 关闭加载.ycm_extra_conf.py提示
let g:ycm_collect_identifiers_from_tags_files=1                 " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2                     " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0                                      " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1                        " 语法关键字补全
let g:ycm_complete_in_comments = 1                              " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1                               " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0     " 注释和字符串中的文字也会被收入补全
" let g:ycm_semantic_triggers = {}
" let g:ycm_semantic_triggers.c = ['->', '.', ' ', '(', '[', '&']
set completeopt=longest,menu                                    " 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
autocmd InsertLeave * if pumvisible() == 0|pclose|endif         " 离开插入模式后自动关闭预览窗口
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"    " 回车即选中当前项
" }
